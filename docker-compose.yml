services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD-SHELL", "echo srvr | nc localhost 2181 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    depends_on:
      - kafka
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka:29092
      JVM_OPTS: "-Xms32M -Xmx64M"
      SERVER_SERVLET_CONTEXTPATH: "/" 

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./docker/redis/scripts:/scripts
      - ./docker/redis/entrypoint.sh:/entrypoint.sh
    command: redis-server --save "" --appendonly no
    entrypoint: ["sh", "-c", "chmod +x /entrypoint.sh && /entrypoint.sh"]

  redis-exporter:
    image: oliver006/redis_exporter:latest
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
    depends_on:
      - redis

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - /tmp/prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=1h'

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_DASHBOARDS_MIN_REFRESH_INTERVAL=1s
      - GF_DASHBOARDS_VERSIONS_TO_KEEP=0
      - GF_PATHS_DATA=/tmp/grafana
    depends_on:
      - prometheus
      - loki
    volumes:
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
      - ./docker/grafana/dashboards:/etc/grafana/dashboards
      - type: tmpfs
        target: /tmp/grafana

  flight-consumer:
    build:
      context: .
      dockerfile: apps/flight_consumer/Dockerfile
    depends_on:
      - kafka
      - redis
    ports:
      - "8001:8001"

  bag-consumer:
    build:
      context: .
      dockerfile: apps/bag_consumer/Dockerfile
    depends_on:
      - kafka
      - redis
    ports:
      - "8002:8002"

  arriving-flight-work-producer:
    build:
      context: .
      dockerfile: apps/arriving_flight_work_producer/Dockerfile
    depends_on:
      - kafka
      - redis
    ports:
      - "8003:8003"

  test-producers:
    build:
      context: .
      dockerfile: apps/test_producers/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8004:8004"

  loki:
    image: grafana/loki:2.9.0
    user: root
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./docker/loki:/etc/loki
      - type: tmpfs
        target: /loki
      - type: tmpfs
        target: /wal

  promtail:
    image: grafana/promtail:2.9.0
    volumes:
      - ./docker/promtail:/etc/promtail
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki

  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
